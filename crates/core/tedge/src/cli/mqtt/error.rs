use certificate::CertificateError;
use rumqttc::tokio_rustls::rustls;

#[derive(thiserror::Error, Debug)]
pub enum MqttError {
    #[error("MQTT error")]
    FromRumqttClient(#[from] rumqttc::ClientError),

    #[error("I/O error")]
    FromIo(#[from] std::io::Error),

    #[error("Received message is not UTF-8 format")]
    FromUtf8(#[from] std::str::Utf8Error),

    #[error("The input QoS should be 0, 1, or 2")]
    InvalidQoS,

    #[error("MQTT connection error: {0}\n\nHint: Is MQTT server running?")]
    ServerConnection(String),

    #[error("Failed to create a TLS config")]
    TlsConfig(#[from] CertificateError),

    #[error("Server TLS certificate could not be verified")]
    ServerCertVerify(#[from] ServerCertVerifyError),

    #[error(transparent)]
    FromRumqttConnection(rumqttc::ConnectionError),

    #[error("Invalid private key")]
    PrivateKeyError(#[from] rustls::Error),
}

// Not sure if there is a better way to do this, unfortunately rumqttc error
// reporting is a bit awkward
impl From<rumqttc::ConnectionError> for MqttError {
    fn from(error: rumqttc::ConnectionError) -> Self {
        use rumqttc::ConnectionError;
        use rumqttc::TlsError;

        if let ConnectionError::Tls(TlsError::Io(io_err)) = &error {
            if io_err
                .to_string()
                .contains("invalid peer certificate: CertNotValidForName")
            {
                return Self::ServerCertVerify(ServerCertVerifyError::CertNotValidForName);
            }

            if io_err
                .to_string()
                .contains("invalid peer certificate: UnsupportedCertVersion")
            {
                return Self::ServerCertVerify(ServerCertVerifyError::UnsupportedCertVersion);
            }
        }

        Self::FromRumqttConnection(error)
    }
}

/// Possible errors that can happen while verifying server certificate.
/// Originally generated by
/// [webpki](https://docs.rs/webpki/latest/webpki/enum.Error.html).
#[derive(thiserror::Error, Debug)]
pub enum ServerCertVerifyError {
    /// MQTT broker certificate is not in X.509 v3 format.
    #[error("MQTT broker certificate is not in X.509 v3 format - as required by thin-edge")]
    UnsupportedCertVersion,

    /// Received certificate is not valid for the name it is being validated for.
    #[error(
        "The MQTT broker certificate is not valid as it's not matching the server hostname.
        \nHint: Be sure to use a hostname that's present in the Subject Alt Name section of the certificate."
    )]
    CertNotValidForName,
}
